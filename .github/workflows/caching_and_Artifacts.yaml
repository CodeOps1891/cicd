
name: Caching and Artifacts Example

on:
  push:
    branches:
      - main

jobs:

  build:
    name: Build and Cache Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Restore Cache
        uses: actions/cache@v3   # Caches the .npm folder based on the hash of package-lock.json
        with:                    # If dependencies don't change, the cache speeds up installation
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |        # Used to attempt partial matches if the exact cache key is unavailable.
            ${{ runner.os }}-node-
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Build the App
        run: npm run build

      - name: Save Build Output as Artifact
        uses: actions/upload-artifact@v3   # Saves the ./build directory as an artifact after the build step.
        with:
          name: build-output
          path: ./build
  # In CI/CD pipelines, artifacts are the files or outputs generated by your build process. Saving build outputs as artifacts means storing those files (e.g., compiled code, binaries, logs, test reports) so they can be used later in the pipeline or downloaded for inspection.
  # Eg: A build job creates a production-ready package, and a deploy job uses it to deploy to a server.
  
  test:
    name: Test with Cached Dependencies
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Download Build Artifact
        uses: actions/download-artifact@v3  # Downloads the saved artifact for testing
        with:
          name: build-output

      - name: Run Tests
        run: npm run test


# ============>  About Caching

# ***************   What is .npm folder  ( ? )   *****************


# The .npm folder is a directory created by npm (Node.js Package Manager) on your system. It contains cached data, such as:

#     Downloaded Packages: When you install a package (e.g., npm install express), npm downloads it and caches it in the .npm directory. This prevents re-downloading the package if it's already cached.
#     Metadata: Information about packages, dependencies, and versions.
#     Logs: Sometimes npm stores logs here for debugging.

# Location on Different Systems:

#     Linux/Mac: ~/.npm
#     Windows: %USERPROFILE%\.npm

# By caching the .npm folder, you save time on dependency installation during CI/CD, as packages won't be downloaded repeatedly if they are already in the cache.





# ***************** How Does Caching Work in GitHub Actions?   *********************

#     Cache Key:
#         A unique identifier (e.g., runner.os-node-hashFiles(...)) is generated based on inputs, like the operating system and a hash of the package-lock.json file.
#         If the cache key matches a previously saved cache, it restores the cached data.

#     Restore Phase:
#         Before running npm install, the pipeline checks if a cache with the matching key exists.
#         If found, the .npm folder is restored, avoiding re-downloading dependencies.

#     Save Phase:
#         After running npm install, the .npm folder is updated with the latest cache.
#         If no matching cache was found earlier, it creates a new cache entry.

#     Restore Keys:
#         Cache restore keys allow partial matches.
#         Example: If the exact cache key (ubuntu-node-abc123) isnâ€™t found, a partial match (ubuntu-node-) might be used.


#     Without Caching:

#     Every CI/CD run downloads all dependencies from scratch using npm install.
#     This increases pipeline execution time, especially for large projects or packages.

#     With Caching:

#     Cached dependencies are restored before running npm install.
#     NPM uses the cache for already-downloaded packages and downloads only missing ones, saving time.

#   ===========> For Node.js projects:
    # First Run: The .npm folder is saved to the cache.
    # Subsequent Runs: The pipeline restores the .npm cache if the package-lock.json hasn't changed, drastically reducing the time spent on dependency installation.

#   ===========> Storage and Expiry:

    # GitHub caches are stored globally and shared across workflows for the same repository.
    # Cache entries expire after 7 days of inactivity.


#  ============>  About Artifacts

# Save Artifact:

#     A job generates files during its execution (e.g., a production build or logs).
#     The actions/upload-artifact action saves those files to GitHub's storage.

# Access Artifact:

#     Later jobs in the workflow can retrieve those files using the actions/download-artifact action.
#     Artifacts remain available for download through the GitHub Actions interface for a set period (default: 90 days).



# The build Job:

        #     Installs dependencies.
        #     Runs the npm run build command, which generates the build output in the build/ folder.

# Upload Artifact:

        #     The upload-artifact step saves the entire build/ directory as an artifact named build-output.

# After Workflow Completes:

        #     The build artifact is available for download from the workflow run page on GitHub.


# Web App Deployment:

#     Build Artifact: Compiled JavaScript/CSS files or static assets.
#     Usage: Deploy the artifact to a hosting service (e.g., Azure, AWS).